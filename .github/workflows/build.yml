# name: build-push-deploy
# on:
#   push:
#     branches: [ main ]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     env:
#       IMAGE_TAG: ${{ github.sha }}
#       REGISTRY: ghcr.io/deal-q
#       BACKEND_IMG: ghcr.io/deal-q/dealq-backend
#       FRONTEND_IMG: ghcr.io/deal-q/dealq-frontend
#     steps:
#       - uses: actions/checkout@v4

#       - name: Detect changes
#         id: filter
#         uses: dorny/paths-filter@v3
#         with:
#           filters: |
#             backend:
#               - 'backend/**'
#             frontend:
#               - 'frontend/**'

#       - name: Login to GHCR
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # ---------------------- BACKEND ----------------------
#       - name: Build & push backend (changed)
#         if: steps.filter.outputs.backend == 'true'
#         run: |
#           set -euxo pipefail
#           docker build -t "$BACKEND_IMG:$IMAGE_TAG" ./backend
#           docker push "$BACKEND_IMG:$IMAGE_TAG"
#           # also refresh/latest for convenience
#           docker tag "$BACKEND_IMG:$IMAGE_TAG" "$BACKEND_IMG:latest"
#           docker push "$BACKEND_IMG:latest"

#       - name: Retag backend latest to current SHA (unchanged)
#         if: steps.filter.outputs.backend != 'true'
#         run: |
#           set -euxo pipefail
#           # Try to reuse the last successful image. If missing, fall back to a build.
#           if docker pull "$BACKEND_IMG:latest"; then
#             docker tag "$BACKEND_IMG:latest" "$BACKEND_IMG:$IMAGE_TAG"
#             docker push "$BACKEND_IMG:$IMAGE_TAG"
#           else
#             echo "No backend:latest found; building to ensure SHA tag exists."
#             docker build -t "$BACKEND_IMG:$IMAGE_TAG" ./backend
#             docker push "$BACKEND_IMG:$IMAGE_TAG"
#             docker tag "$BACKEND_IMG:$IMAGE_TAG" "$BACKEND_IMG:latest"
#             docker push "$BACKEND_IMG:latest"
#           fi

#       # ---------------------- FRONTEND ----------------------
#       - name: Build & push frontend (changed)
#         if: steps.filter.outputs.frontend == 'true'
#         run: |
#           set -euxo pipefail
#           docker build \
#             --build-arg NEXT_PUBLIC_SUPABASE_URL='${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}' \
#             --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY='${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}' \
#             --build-arg NEXT_PUBLIC_API_BASE_URL='https://api.dealq.ai' \
#             --build-arg NEXT_PUBLIC_SITE_URL='https://dealq.ai' \
#             -t "$FRONTEND_IMG:$IMAGE_TAG" ./frontend
#           docker push "$FRONTEND_IMG:$IMAGE_TAG"
#           docker tag "$FRONTEND_IMG:$IMAGE_TAG" "$FRONTEND_IMG:latest"
#           docker push "$FRONTEND_IMG:latest"

#       - name: Retag frontend latest to current SHA (unchanged)
#         if: steps.filter.outputs.frontend != 'true'
#         run: |
#           set -euxo pipefail
#           if docker pull "$FRONTEND_IMG:latest"; then
#             docker tag "$FRONTEND_IMG:latest" "$FRONTEND_IMG:$IMAGE_TAG"
#             docker push "$FRONTEND_IMG:$IMAGE_TAG"
#           else
#             echo "No frontend:latest found; building to ensure SHA tag exists."
#             docker build \
#               --build-arg NEXT_PUBLIC_SUPABASE_URL='${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}' \
#               --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY='${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}' \
#               --build-arg NEXT_PUBLIC_API_BASE_URL='https://api.dealq.ai' \
#               --build-arg NEXT_PUBLIC_SITE_URL='https://dealq.ai' \
#               -t "$FRONTEND_IMG:$IMAGE_TAG" ./frontend
#             docker push "$FRONTEND_IMG:$IMAGE_TAG"
#             docker tag "$FRONTEND_IMG:$IMAGE_TAG" "$FRONTEND_IMG:latest"
#             docker push "$FRONTEND_IMG:latest"
#           fi
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: SSH deploy
#         uses: appleboy/ssh-action@v1.2.0
#         with:
#           host: ${{ secrets.DROPLET_IP }}
#           username: deploy
#           key: ${{ secrets.DROPLET_SSH_KEY }}
#           script: |
#             cd /opt/dealq
#             sed -i "s/^IMAGE_TAG=.*/IMAGE_TAG=${{ github.sha }}/" deploy.env
#             ./deploy.sh
